import "antd/es/modal/style";
import _Modal from "antd/es/modal";
import _extends from "@babel/runtime/helpers/esm/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["children", "trigger", "onVisibleChange", "modalProps", "onFinish", "title", "width"];
import React, { useContext, useEffect, useMemo, useRef } from 'react';
import useMergedState from "rc-util/es/hooks/useMergedState";
import omit from 'omit.js';
import { createPortal } from 'react-dom';
import { BaseForm } from '../../BaseForm';
import { noteOnce } from "rc-util/es/warning";

function ModalForm(_ref) {
  var _context$locale, _context$locale$Modal, _context$locale2, _context$locale2$Moda, _rest$submitter, _rest$submitter2, _rest$submitter3;

  var children = _ref.children,
      trigger = _ref.trigger,
      onVisibleChange = _ref.onVisibleChange,
      modalProps = _ref.modalProps,
      onFinish = _ref.onFinish,
      title = _ref.title,
      width = _ref.width,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useMergedState = useMergedState(!!rest.visible, {
    value: rest.visible,
    onChange: onVisibleChange
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      visible = _useMergedState2[0],
      setVisible = _useMergedState2[1];
  /** Modal dom 解除渲染之后 */


  var _useMergedState3 = useMergedState(false),
      _useMergedState4 = _slicedToArray(_useMergedState3, 2),
      isDestroy = _useMergedState4[0],
      setIsDestroy = _useMergedState4[1];

  var needRenderForm = useMemo(function () {
    if (modalProps === null || modalProps === void 0 ? void 0 : modalProps.destroyOnClose) {
      return visible;
    }

    return true;
  }, [modalProps === null || modalProps === void 0 ? void 0 : modalProps.destroyOnClose, visible]);
  useEffect(function () {
    if (visible && rest.visible) {
      onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(true);
    }
  }, [rest.visible, visible]);
  var context = useContext(_ConfigProvider.ConfigContext);
  noteOnce( // eslint-disable-next-line @typescript-eslint/dot-notation
  !rest['footer'] || !(modalProps === null || modalProps === void 0 ? void 0 : modalProps.footer), 'ModalForm 是一个 ProForm 的特殊布局，如果想自定义按钮，请使用 submit.render 自定义。');
  var renderSubmitter = rest.submitter === false ? false : _objectSpread(_objectSpread({}, rest.submitter), {}, {
    searchConfig: _objectSpread({
      submitText: (modalProps === null || modalProps === void 0 ? void 0 : modalProps.okText) || ((_context$locale = context.locale) === null || _context$locale === void 0 ? void 0 : (_context$locale$Modal = _context$locale.Modal) === null || _context$locale$Modal === void 0 ? void 0 : _context$locale$Modal.okText) || '确认',
      resetText: (modalProps === null || modalProps === void 0 ? void 0 : modalProps.cancelText) || ((_context$locale2 = context.locale) === null || _context$locale2 === void 0 ? void 0 : (_context$locale2$Moda = _context$locale2.Modal) === null || _context$locale2$Moda === void 0 ? void 0 : _context$locale2$Moda.cancelText) || '取消'
    }, (_rest$submitter = rest.submitter) === null || _rest$submitter === void 0 ? void 0 : _rest$submitter.searchConfig),
    submitButtonProps: _objectSpread({
      type: (modalProps === null || modalProps === void 0 ? void 0 : modalProps.okType) || 'primary'
    }, (_rest$submitter2 = rest.submitter) === null || _rest$submitter2 === void 0 ? void 0 : _rest$submitter2.submitButtonProps),
    resetButtonProps: _objectSpread({
      preventDefault: true,
      onClick: function onClick(e) {
        var _modalProps$onCancel;

        modalProps === null || modalProps === void 0 ? void 0 : (_modalProps$onCancel = modalProps.onCancel) === null || _modalProps$onCancel === void 0 ? void 0 : _modalProps$onCancel.call(modalProps, e);
        setVisible(false);
      }
    }, (_rest$submitter3 = rest.submitter) === null || _rest$submitter3 === void 0 ? void 0 : _rest$submitter3.resetButtonProps)
  });
  var triggerDom = /*#__PURE__*/React.createElement(React.Fragment, {
    key: "trigger"
  }, trigger && /*#__PURE__*/React.cloneElement(trigger, _objectSpread(_objectSpread({}, trigger.props), {}, {
    onClick: function () {
      var _onClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {
        var _trigger$props, _trigger$props$onClic;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                setVisible(!visible);
                (_trigger$props = trigger.props) === null || _trigger$props === void 0 ? void 0 : (_trigger$props$onClic = _trigger$props.onClick) === null || _trigger$props$onClic === void 0 ? void 0 : _trigger$props$onClic.call(_trigger$props, e);

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function onClick(_x) {
        return _onClick.apply(this, arguments);
      }

      return onClick;
    }()
  })));
  useEffect(function () {
    if (visible) {
      setTimeout(function () {
        setIsDestroy(visible);
      }, 100);
      return;
    }

    setIsDestroy(visible);
  }, [setIsDestroy, visible]);
  var footerRef = useRef(null);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_Modal, _extends({
    title: title,
    width: width || 800
  }, modalProps, {
    visible: visible,
    onCancel: function onCancel(e) {
      var _modalProps$onCancel2;

      setVisible(false);
      modalProps === null || modalProps === void 0 ? void 0 : (_modalProps$onCancel2 = modalProps.onCancel) === null || _modalProps$onCancel2 === void 0 ? void 0 : _modalProps$onCancel2.call(modalProps, e);
    },
    footer: rest.submitter !== false && /*#__PURE__*/React.createElement("div", {
      ref: footerRef,
      style: {
        display: 'flex',
        justifyContent: 'flex-end'
      }
    })
  }), needRenderForm && /*#__PURE__*/React.createElement(BaseForm, _extends({
    formComponentType: "ModalForm",
    layout: "vertical"
  }, omit(rest, ['visible']), {
    onFinish: /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values) {
        var success;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (onFinish) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return");

              case 2:
                _context2.next = 4;
                return onFinish(values);

              case 4:
                success = _context2.sent;

                if (success) {
                  setVisible(false);
                }

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }(),
    submitter: renderSubmitter,
    contentRender: function contentRender(item, submitter) {
      // 未配置自定义提交按钮，则直接将提交按钮渲染到内容区
      if (rest.submitter === false) {
        return /*#__PURE__*/React.createElement(React.Fragment, null, item, submitter);
      } // 如果用户配置了自定义的提交按钮，那么我们等到弹框/抽屉底部区域渲染成功后再将自定义按钮渲染过去


      if (footerRef.current && isDestroy && submitter) {
        return /*#__PURE__*/React.createElement(React.Fragment, null, item, /*#__PURE__*/createPortal(submitter, footerRef.current));
      }

      return item;
    }
  }), children)), triggerDom);
}

export { ModalForm };