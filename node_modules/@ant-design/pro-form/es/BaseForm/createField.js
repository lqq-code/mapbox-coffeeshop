import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["valueType", "customLightMode", "lightFilterLabelFormatter", "valuePropName", "ignoreWidth", "defaultProps"],
    _excluded2 = ["label", "tooltip", "placeholder", "width", "bordered", "messageVariables", "ignoreFormItem", "transform", "convertValue", "readonly", "allowClear", "colSize", "getFormItemProps", "getFieldProps", "filedConfig", "cacheForSwr", "proFieldProps"];
import React, { useMemo, useContext, useCallback, useState, useEffect, useRef } from 'react';
import { pickProFormItemProps, omitUndefined, usePrevious, isDeepEqualReact, useLatest } from '@ant-design/pro-utils';
import classnames from 'classnames';
import { noteOnce } from "rc-util/es/warning";
import { stringify } from 'use-json-comparison';
import FieldContext from '../FieldContext';
import { ProFormItem, ProFormDependency } from '../components';
import { FieldContext as RcFieldContext } from 'rc-field-form';
export var TYPE = Symbol('ProFormComponent');
var WIDTH_SIZE_ENUM = {
  // 适用于短数字，短文本或者选项
  xs: 104,
  s: 216,
  // 适用于较短字段录入、如姓名、电话、ID 等。
  sm: 216,
  m: 328,
  // 标准宽度，适用于大部分字段长度。
  md: 328,
  l: 440,
  // 适用于较长字段录入，如长网址、标签组、文件路径等。
  lg: 440,
  // 适用于长文本录入，如长链接、描述、备注等，通常搭配自适应多行输入框或定高文本域使用。
  xl: 552
};
var ignoreWidthValueType = ['switch', 'radioButton', 'radio', 'rate'];
/**
 * 这个方法的主要作用的帮助 Field 增加 FormItem 同时也会处理 lightFilter
 *
 * @param Field
 * @param config
 */

function createField(Field, config) {
  // 标记是否是 ProForm 的组件
  // @ts-ignore
  // eslint-disable-next-line no-param-reassign
  Field.displayName = 'ProFormComponent';

  var FieldWithContext = function FieldWithContext(props) {
    var _ref = _objectSpread(_objectSpread({}, props === null || props === void 0 ? void 0 : props.filedConfig), config) || {},
        valueType = _ref.valueType,
        customLightMode = _ref.customLightMode,
        lightFilterLabelFormatter = _ref.lightFilterLabelFormatter,
        _ref$valuePropName = _ref.valuePropName,
        valuePropName = _ref$valuePropName === void 0 ? 'value' : _ref$valuePropName,
        ignoreWidth = _ref.ignoreWidth,
        defaultProps = _ref.defaultProps,
        defaultFormItemProps = _objectWithoutProperties(_ref, _excluded);

    var _defaultProps$props = _objectSpread(_objectSpread({}, defaultProps), props),
        label = _defaultProps$props.label,
        tooltip = _defaultProps$props.tooltip,
        placeholder = _defaultProps$props.placeholder,
        width = _defaultProps$props.width,
        bordered = _defaultProps$props.bordered,
        messageVariables = _defaultProps$props.messageVariables,
        ignoreFormItem = _defaultProps$props.ignoreFormItem,
        transform = _defaultProps$props.transform,
        convertValue = _defaultProps$props.convertValue,
        readonly = _defaultProps$props.readonly,
        allowClear = _defaultProps$props.allowClear,
        colSize = _defaultProps$props.colSize,
        getFormItemProps = _defaultProps$props.getFormItemProps,
        getFieldProps = _defaultProps$props.getFieldProps,
        filedConfig = _defaultProps$props.filedConfig,
        cacheForSwr = _defaultProps$props.cacheForSwr,
        proFieldProps = _defaultProps$props.proFieldProps,
        rest = _objectWithoutProperties(_defaultProps$props, _excluded2);

    var restRef = useLatest(rest); // eslint-disable-next-line @typescript-eslint/no-unused-vars

    var _useState = useState(),
        _useState2 = _slicedToArray(_useState, 2),
        _ = _useState2[0],
        forceUpdate = _useState2[1];
    /**
     * 用于判断是否要重置shouldRender
     */


    var isUpdate = useRef(false);
    var shouldRender = useRef(true); // onChange触发fieldProps,formItemProps重新执行

    var _useState3 = useState(),
        _useState4 = _slicedToArray(_useState3, 2),
        onlyChange = _useState4[0],
        forceUpdateByOnChange = _useState4[1];
    /**
     * 从 context 中拿到的值
     */


    var fieldContextValue = React.useContext(FieldContext);
    /**
     * dependenciesValues change to trigger re-execute of getFieldProps and getFormItemProps
     */

    var changedProps = useMemo(function () {
      return {
        formItemProps: getFormItemProps === null || getFormItemProps === void 0 ? void 0 : getFormItemProps(),
        fieldProps: getFieldProps === null || getFieldProps === void 0 ? void 0 : getFieldProps()
      };
    }, // eslint-disable-next-line react-hooks/exhaustive-deps
    [getFieldProps, getFormItemProps, rest.dependenciesValues, onlyChange]);
    var fieldProps = useMemo(function () {
      var newFieldProps = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, ignoreFormItem ? omitUndefined({
        value: rest.value
      }) : {}), {}, {
        placeholder: placeholder,
        disabled: props.disabled
      }, fieldContextValue.fieldProps), changedProps.fieldProps), rest.fieldProps);

      newFieldProps.style = omitUndefined(newFieldProps === null || newFieldProps === void 0 ? void 0 : newFieldProps.style);
      return newFieldProps;
    }, [ignoreFormItem, rest.value, rest.fieldProps, placeholder, props.disabled, fieldContextValue.fieldProps, changedProps.fieldProps]); // restFormItemProps is user props pass to Form.Item

    var restFormItemProps = pickProFormItemProps(rest);
    var formItemProps = useMemo(function () {
      return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, fieldContextValue.formItemProps), restFormItemProps), changedProps.formItemProps), rest.formItemProps);
    }, [changedProps.formItemProps, fieldContextValue.formItemProps, rest.formItemProps, restFormItemProps]); // 支持测试用例 renderFormItem support return false

    useEffect(function () {
      if (shouldRender.current === false && ( // 借助 dependenciesValues 重新执行renderFormItem
      rest.renderFormItem || rest.dependenciesValues)) {
        if (isUpdate.current === true) {
          shouldRender.current = true;
          forceUpdate([]);
        } else {
          isUpdate.current = true;
        }
      }
    }, [rest.dependenciesValues, rest.renderFormItem]);
    var otherProps = useMemo(function () {
      return _objectSpread(_objectSpread({
        messageVariables: messageVariables
      }, defaultFormItemProps), formItemProps);
    }, [defaultFormItemProps, formItemProps, messageVariables]);
    noteOnce( // eslint-disable-next-line @typescript-eslint/dot-notation
    !rest['defaultValue'], '请不要在 Form 中使用 defaultXXX。如果需要默认值请使用 initialValues 和 initialValue。');
    var propsValueType = useMemo(function () {
      return rest.valueType;
    }, [rest.valueType]);

    var _useContext = useContext(RcFieldContext),
        prefixName = _useContext.prefixName;

    var proFieldKey = useMemo(function () {
      /** 如果没有cacheForSwr，默认关掉缓存 只有table中默认打开，form中打开问题还挺多的，有些场景name 会相同 */
      if (!cacheForSwr) return undefined;
      var name = otherProps === null || otherProps === void 0 ? void 0 : otherProps.name;
      if (Array.isArray(name)) name = name.join('_');
      if (Array.isArray(prefixName) && name) name = "".concat(prefixName.join('.'), ".").concat(name);
      return name && "form-field-".concat(name); // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [stringify(otherProps === null || otherProps === void 0 ? void 0 : otherProps.name), prefixName]);
    var prefRest = usePrevious(rest);
    var onChange = useCallback(function () {
      var _fieldProps$onChange;

      if (getFormItemProps || getFieldProps) {
        forceUpdateByOnChange([]);
      } else if (rest.renderFormItem) {
        forceUpdate([]);
      }

      for (var _len = arguments.length, restParams = new Array(_len), _key = 0; _key < _len; _key++) {
        restParams[_key] = arguments[_key];
      }

      fieldProps === null || fieldProps === void 0 ? void 0 : (_fieldProps$onChange = fieldProps.onChange) === null || _fieldProps$onChange === void 0 ? void 0 : _fieldProps$onChange.call.apply(_fieldProps$onChange, [fieldProps].concat(restParams));
    }, [getFieldProps, getFormItemProps, fieldProps, rest.renderFormItem]);
    var renderFormItem = useCallback(function () {
      var _restRef$current;

      var renderDom = (_restRef$current = restRef.current).renderFormItem.apply(_restRef$current, arguments); // 支持renderFormItem返回false||null||undefined后渲染组件


      if ((renderDom === false || renderDom === null || renderDom === undefined) && shouldRender.current === true) {
        shouldRender.current = false;
        isUpdate.current = false; // 由于renderFormItem可能会触发setState的执行，所以合适的时机执行

        requestAnimationFrame(function () {
          return forceUpdate([]);
        });
      } else {
        isUpdate.current = true;
      }

      return renderDom;
    }, [restRef]);
    var fieldPropsStyle = useMemo(function () {
      var newStyle = _objectSpread({}, fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.style);

      if (newStyle.width !== undefined && propsValueType === 'switch') {
        Reflect.deleteProperty(newStyle, 'width');
      }

      return newStyle;
    }, // eslint-disable-next-line react-hooks/exhaustive-deps
    [stringify(fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.style), propsValueType]);
    var style = useMemo(function () {
      return omitUndefined(_objectSpread({
        width: width && !WIDTH_SIZE_ENUM[width] ? width : undefined
      }, fieldPropsStyle));
    }, [fieldPropsStyle, width]);
    var className = useMemo(function () {
      return classnames(fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.className, _defineProperty({
        'pro-field': width && WIDTH_SIZE_ENUM[width]
      }, "pro-field-".concat(width), width && // 有些 valueType 不需要宽度
      !ignoreWidthValueType.includes(propsValueType) && !ignoreWidth && WIDTH_SIZE_ENUM[width])) || undefined;
    }, [ignoreWidth, propsValueType, fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.className, width]);
    var fieldProFieldProps = useMemo(function () {
      return omitUndefined(_objectSpread({
        mode: rest === null || rest === void 0 ? void 0 : rest.mode,
        readonly: readonly,
        params: rest.params,
        proFieldKey: proFieldKey
      }, proFieldProps));
    }, [proFieldKey, readonly, rest === null || rest === void 0 ? void 0 : rest.mode, rest.params, proFieldProps]);
    var fieldFieldProps = useMemo(function () {
      return _objectSpread(_objectSpread({
        onChange: onChange,
        allowClear: allowClear
      }, fieldProps), {}, {
        style: style,
        className: className
      });
    }, [allowClear, className, onChange, fieldProps, style]);
    var field = useMemo(function () {
      return /*#__PURE__*/React.createElement(Field // @ts-ignore
      , _extends({
        key: props.proFormFieldKey || props.name // ProXxx 上面的 props 透传给 FieldProps，可能包含 Field 自定义的 props，
        // 比如 ProFormSelect 的 request

      }, rest, {
        renderFormItem: rest.renderFormItem ? renderFormItem : undefined,
        fieldProps: fieldFieldProps,
        proFieldProps: fieldProFieldProps
      })); // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [renderFormItem, fieldProFieldProps, fieldFieldProps, // eslint-disable-next-line react-hooks/exhaustive-deps
    isDeepEqualReact(prefRest, rest, ['onChange', 'onBlur', 'onFocus', 'record', 'renderFormItem']) ? undefined : {}]); // 使用useMemo包裹避免不必要的re-render

    var FormItem = useMemo(function () {
      var _otherProps$name, _field$props$allowCle, _field$props, _field$props2;

      return /*#__PURE__*/React.createElement(ProFormItem // 全局的提供一个 tip 功能，可以减少代码量
      // 轻量模式下不通过 FormItem 显示 label
      , _extends({
        label: label && (proFieldProps === null || proFieldProps === void 0 ? void 0 : proFieldProps.light) !== true ? label : undefined,
        tooltip: (proFieldProps === null || proFieldProps === void 0 ? void 0 : proFieldProps.light) !== true && tooltip,
        valuePropName: valuePropName // @ts-ignore
        ,
        key: props.proFormFieldKey || ((_otherProps$name = otherProps.name) === null || _otherProps$name === void 0 ? void 0 : _otherProps$name.toString()) // @ts-ignore

      }, otherProps, {
        ignoreFormItem: ignoreFormItem,
        transform: transform,
        dataFormat: fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.format,
        valueType: valueType || propsValueType,
        messageVariables: _objectSpread({
          label: label || ''
        }, otherProps === null || otherProps === void 0 ? void 0 : otherProps.messageVariables),
        convertValue: convertValue,
        lightProps: omitUndefined(_objectSpread(_objectSpread(_objectSpread({}, fieldProps), {}, {
          valueType: valueType || propsValueType,
          bordered: bordered,
          allowClear: (_field$props$allowCle = field === null || field === void 0 ? void 0 : (_field$props = field.props) === null || _field$props === void 0 ? void 0 : _field$props.allowClear) !== null && _field$props$allowCle !== void 0 ? _field$props$allowCle : allowClear,
          light: proFieldProps === null || proFieldProps === void 0 ? void 0 : proFieldProps.light,
          label: label,
          customLightMode: customLightMode,
          labelFormatter: lightFilterLabelFormatter,
          valuePropName: valuePropName,
          footerRender: field === null || field === void 0 ? void 0 : (_field$props2 = field.props) === null || _field$props2 === void 0 ? void 0 : _field$props2.footerRender
        }, rest.lightProps), otherProps.lightProps))
      }), field);
    }, [label, proFieldProps === null || proFieldProps === void 0 ? void 0 : proFieldProps.light, tooltip, valuePropName, props.proFormFieldKey, otherProps, ignoreFormItem, transform, fieldProps, valueType, propsValueType, convertValue, bordered, field, allowClear, customLightMode, lightFilterLabelFormatter, rest.lightProps]);
    return shouldRender.current ? FormItem : null;
  };

  var DependencyWrapper = function DependencyWrapper(props) {
    var dependencies = props.dependencies;
    return dependencies ? /*#__PURE__*/React.createElement(ProFormDependency, {
      name: dependencies
    }, function (values) {
      return /*#__PURE__*/React.createElement(FieldWithContext, _extends({
        dependenciesValues: values,
        dependencies: dependencies
      }, props));
    }) : /*#__PURE__*/React.createElement(FieldWithContext, _extends({
      dependencies: dependencies
    }, props));
  };

  return DependencyWrapper;
}

export { createField };