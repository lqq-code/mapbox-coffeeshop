import "antd/es/form/style";
import _Form from "antd/es/form";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["name", "children", "ignoreFormListField"];
import React from "react";
import set from "rc-util/es/utils/set";
import get from "rc-util/es/utils/get";
import { useContext, useMemo } from 'react';
import { FormListContext } from '../List';
import { ProFormContext, isDeepEqualReact } from '@ant-design/pro-utils';

var ProFormDependency = function ProFormDependency(_ref) {
  var names = _ref.name,
      children = _ref.children,
      ignoreFormListField = _ref.ignoreFormListField,
      rest = _objectWithoutProperties(_ref, _excluded);

  var context = useContext(ProFormContext); // ProFromList 的 field，里面有name和key

  var formListField = useContext(FormListContext); // flatten each name into an (string | number)[]

  var flattenNames = useMemo(function () {
    return names.map(function (itemName) {
      var _formListField$listNa;

      var name = [itemName]; // ignoreFormListField为 true 或 formListField.name === undefined 时
      // 应从全局取值，要将 names 中各项的路径前缀(formListField.listName)忽略

      if (!ignoreFormListField && formListField.name !== undefined && ((_formListField$listNa = formListField.listName) === null || _formListField$listNa === void 0 ? void 0 : _formListField$listNa.length)) {
        name.unshift(formListField.listName);
      }

      return name.flat(1);
    });
  }, [formListField.listName, formListField.name, ignoreFormListField, names]);
  return /*#__PURE__*/React.createElement(_Form.Item, _extends({}, rest, {
    noStyle: true,
    shouldUpdate: function shouldUpdate(prevValues, nextValues, info) {
      if (typeof rest.shouldUpdate === 'boolean') {
        return rest.shouldUpdate;
      } else if (typeof rest.shouldUpdate === 'function') {
        var _rest$shouldUpdate;

        return (_rest$shouldUpdate = rest.shouldUpdate) === null || _rest$shouldUpdate === void 0 ? void 0 : _rest$shouldUpdate.call(rest, prevValues, nextValues, info);
      }

      return flattenNames.some(function (name) {
        return !isDeepEqualReact(get(prevValues, name), get(nextValues, name));
      });
    }
  }), function (form) {
    var values = {};

    for (var i = 0; i < names.length; i++) {
      var _context$getFieldForm, _context$getFieldForm2;

      var pathToGet = flattenNames[i],
          pathToSet = names[i];
      var value = (_context$getFieldForm = (_context$getFieldForm2 = context.getFieldFormatValue) === null || _context$getFieldForm2 === void 0 ? void 0 : _context$getFieldForm2.call(context, pathToGet)) !== null && _context$getFieldForm !== void 0 ? _context$getFieldForm : form.getFieldValue(pathToGet);
      values = set(values, Array.isArray(pathToSet) ? pathToSet : [pathToSet], value, false);
    }

    return children === null || children === void 0 ? void 0 : children(values, form);
  });
};

export default ProFormDependency;