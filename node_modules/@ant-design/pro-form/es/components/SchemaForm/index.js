import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["columns", "layoutType", "steps", "type", "action"];

/* eslint-disable react/no-array-index-key */
import React, { useCallback, useImperativeHandle, useMemo, useRef, useState } from 'react';
import { LabelIconTip, omitUndefined, useLatest, runFunction } from '@ant-design/pro-utils';
import { renderValueType } from './valueType';
import omit from 'omit.js';
import { DrawerForm } from '../../layouts/DrawerForm';
import { QueryFilter } from '../../layouts/QueryFilter';
import { LightFilter } from '../../layouts/LightFilter';
import { StepsForm } from '../../layouts/StepsForm';
import { ModalForm } from '../../layouts/ModalForm';
import { ProForm } from '../../layouts/ProForm';
export * from './typing';
var FormComments = {
  DrawerForm: DrawerForm,
  QueryFilter: QueryFilter,
  LightFilter: LightFilter,
  StepForm: StepsForm.StepForm,
  StepsForm: StepsForm,
  ModalForm: ModalForm
};

var noop = function noop() {};
/**
 * 此组件可以根据 Json Schema 来生成相应的表单,大部分配置与 antd 的 table 列配置相同
 *
 * @see 此组件仍为 beta 版本，api 可能发生变化
 */


function BetaSchemaForm(props) {
  var columns = props.columns,
      _props$layoutType = props.layoutType,
      layoutType = _props$layoutType === void 0 ? 'Form' : _props$layoutType,
      _props$steps = props.steps,
      steps = _props$steps === void 0 ? [] : _props$steps,
      _props$type = props.type,
      type = _props$type === void 0 ? 'form' : _props$type,
      action = props.action,
      restProps = _objectWithoutProperties(props, _excluded);

  var Form = FormComments[layoutType] || ProForm; // eslint-disable-next-line @typescript-eslint/no-unused-vars

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      _ = _useState2[0],
      forceUpdate = _useState2[1];

  var _useState3 = useState([]),
      _useState4 = _slicedToArray(_useState3, 2),
      columnsChange = _useState4[0],
      forceUpdateColumns = _useState4[1];

  var propsRef = useLatest(props);
  var formRef = useRef(props.form);
  var oldValuesRef = useRef();
  var refMap = useMemo(function () {
    var obj = {
      form: formRef.current
    };
    Object.defineProperty(obj, 'form', {
      get: function get() {
        return formRef.current || {
          getFieldValue: noop,
          getFieldsValue: noop,
          resetFields: noop,
          setFieldsValue: noop
        };
      }
    });
    return obj;
  }, []);
  useImperativeHandle(restProps.formRef, function () {
    return refMap.form;
  });
  var rest = useMemo(function () {
    return omit(restProps, ['shouldUpdate', 'formRef']);
  }, [restProps]);
  /**
   * 生成子项，方便被 table 接入
   *
   * @param items
   */

  var genItems = useCallback(function (items) {
    return items.filter(function (originItem) {
      if (originItem.hideInForm && type === 'form') {
        return false;
      }

      return true;
    }).sort(function (a, b) {
      if (b.order || a.order) {
        return (b.order || 0) - (a.order || 0);
      }

      return (b.index || 0) - (a.index || 0);
    }).map(function (originItem, index) {
      var _item$dataIndex;

      var title = runFunction(originItem.title, originItem, 'form', /*#__PURE__*/React.createElement(LabelIconTip, {
        label: originItem.title,
        tooltip: originItem.tooltip || originItem.tip
      }));
      var item = omitUndefined({
        title: title,
        label: title,
        name: originItem.name,
        valueType: runFunction(originItem.valueType, {}),
        key: originItem.key,
        columns: originItem.columns,
        valueEnum: originItem.valueEnum,
        dataIndex: originItem.key || originItem.dataIndex,
        initialValue: originItem.initialValue,
        width: originItem.width,
        index: originItem.index,
        readonly: originItem.readonly,
        colSize: originItem.colSize,
        className: originItem.className,
        tooltip: originItem.tooltip || originItem.tip,
        dependencies: originItem.dependencies,
        proFieldProps: originItem.proFieldProps,
        getFieldProps: originItem.fieldProps ? function () {
          return runFunction(originItem.fieldProps, refMap.form, originItem);
        } : undefined,
        getFormItemProps: originItem.formItemProps ? function () {
          return runFunction(originItem.formItemProps, refMap.form, originItem);
        } : undefined,
        render: originItem.render,
        renderFormItem: originItem.renderFormItem,
        renderText: originItem.renderText,
        request: originItem.request,
        params: originItem.params,
        transform: originItem.transform
      });
      item.key = item.key || ((_item$dataIndex = item.dataIndex) === null || _item$dataIndex === void 0 ? void 0 : _item$dataIndex.toString()) || index;
      return renderValueType(item, {
        action: action,
        type: type,
        originItem: originItem,
        refMap: refMap,
        genItems: genItems
      });
    }).filter(function (field) {
      return Boolean(field);
    });
  }, [action, props.dateFormatter, refMap, type]);
  /**
   * fixed StepsForm toggle step causing formRef to update
   */

  var onCurrentChange = useCallback(function (current) {
    var _propsRef$current$onC, _propsRef$current;

    (_propsRef$current$onC = (_propsRef$current = propsRef.current).onCurrentChange) === null || _propsRef$current$onC === void 0 ? void 0 : _propsRef$current$onC.call(_propsRef$current, current);
    forceUpdate([]);
  }, [propsRef]);
  var StepsFormDom = useMemo(function () {
    if (layoutType !== 'StepsForm') {
      return;
    }

    return /*#__PURE__*/React.createElement(StepsForm, _extends({
      formRef: formRef
    }, rest, {
      onCurrentChange: onCurrentChange
    }), steps === null || steps === void 0 ? void 0 : steps.map(function (item, index) {
      return /*#__PURE__*/React.createElement(BetaSchemaForm, _extends({}, item, {
        key: index,
        layoutType: "StepForm",
        columns: columns[index]
      }));
    }));
  }, [columns, layoutType, onCurrentChange, rest, steps]);
  var ItemsDom = useMemo(function () {
    if (layoutType === 'StepsForm') {
      return;
    }

    return genItems(columns); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [columns, genItems, layoutType, columnsChange]);
  var onValuesChange = useCallback(function (changedValues, values) {
    var _propsRef$current2 = propsRef.current,
        _propsRef$current2$sh = _propsRef$current2.shouldUpdate,
        shouldUpdate = _propsRef$current2$sh === void 0 ? true : _propsRef$current2$sh,
        propsOnValuesChange = _propsRef$current2.onValuesChange;

    if (shouldUpdate === true || typeof shouldUpdate === 'function' && shouldUpdate(values, oldValuesRef.current)) {
      forceUpdateColumns([]);
    }

    oldValuesRef.current = values;
    propsOnValuesChange === null || propsOnValuesChange === void 0 ? void 0 : propsOnValuesChange(changedValues, values);
  }, [propsRef]);
  /** 如果是StepsForm */

  if (layoutType === 'StepsForm') return /*#__PURE__*/React.createElement(React.Fragment, null, StepsFormDom);
  /** 如果是行内模式 */

  if (layoutType === 'Embed') return /*#__PURE__*/React.createElement(React.Fragment, null, ItemsDom);
  return /*#__PURE__*/React.createElement(Form, _extends({
    onValuesChange: onValuesChange,
    formRef: formRef
  }, rest), ItemsDom);
}

export default BetaSchemaForm;